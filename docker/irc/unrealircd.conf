/* Configuration file for UnrealIRCd 5
 *
 * Simply copy this file to your conf/ directory, call it
 * 'unrealircd.conf' and walk through it line by line (edit it!)
 *
 * Important: All lines, except { and } end with an ;
 * This is very important, if you miss a ; somewhere then the
 * configuration file parser will complain and the file will not
 * be processed correctly!
 * If this is your first experience with an UnrealIRCd configuration
 * file then we really recommend you to read a little about the syntax,
 * this only takes a few minutes and will help you a lot:
 * https://www.unrealircd.org/docs/Configuration#Configuration_file_syntax
 *
 * UnrealIRCd 5 documentation (very extensive!):
 * https://www.unrealircd.org/docs/UnrealIRCd_5_documentation
 *
 * Frequently Asked Questions:
 * https://www.unrealircd.org/docs/FAQ
 *
 */

/* UnrealIRCd makes heavy use of modules. Modules allow you to completely
 * customize the featureset you wish to enable in UnrealIRCd.
 * See: https://www.unrealircd.org/docs/Modules
 *
 * By using the include below we instruct the IRCd to read the file
 * 'modules.default.conf' which will load more than 150 modules
 * shipped with UnrealIRCd. In other words: this will simply load
 * all the available features in UnrealIRCd.
 * If you are setting up UnrealIRCd for the first time we suggest you
 * use this. Then, when everything is up and running you can come
 * back later to customize the list (if you wish).
 */
include "modules.default.conf";

/* Now let's include some other files as well:
 * - help/help.conf for our on-IRC /HELPOP system
 * - badwords.conf for channel and user mode +G
 * - spamfilter.conf as an example for spamfilter usage
 *   (commented out)
 * - operclass.default.conf contains some good operclasses which
 *   you can use in your oper blocks.
 */
include "help/help.conf";
include "badwords.conf";
include "operclass.default.conf";

/* This is the me { } block which basically says who we are.
 * It defines our server name, some information line and an unique "sid".
 * The server id (sid) must start with a digit followed by two digits or
 * letters. The sid must be unique for your IRC network (each server should
 * have it's own sid).
 */
me {
	name "irc.example.org";
	info "ExampleNET Server";
	sid "001";
}

/* The admin { } block defines what users will see if they type /ADMIN.
 * It normally contains information on how to contact the administrator.
 */
admin {
	"Bob Smith";
	"bob";
	"email@example.org";
}

/* Clients and servers are put in class { } blocks, we define them here.
 * Class blocks consist of the following items:
 * - pingfreq: how often to ping a user / server (in seconds)
 * - connfreq: how often we try to connect to this server (in seconds)
 * - sendq: the maximum queue size for a connection
 * - recvq: maximum receive queue from a connection (flood control)
 */

/* Client class with good defaults */
class clients
{
	pingfreq 90;
	maxclients 1000;
	sendq 200k;
	recvq 8000;
}

/* Special class for IRCOps with higher limits */
class opers
{
	pingfreq 90;
	maxclients 50;
	sendq 1M;
	recvq 8000;
}

/* Server class with good defaults */
class servers
{
	pingfreq 60;
	connfreq 15; /* try to connect every 15 seconds */
	maxclients 10; /* max servers */
	sendq 20M;
}

/* Allow blocks define which clients may connect to this server.
 * This allows you to add a server password or restrict the server to
 * specific IP's only. You also configure the maximum connections
 * allowed per IP here.
 * See also: https://www.unrealircd.org/docs/Allow_block
 */

/* Allow everyone in, but only 3 connections per IP */
allow {
	ip *@*;
	class clients;
	maxperip 3;
}

/* Oper blocks define your IRC Operators.
 * IRC Operators are people who have "extra rights" compared to others,
 * for example they may /KILL other people, initiate server linking,
 * /JOIN channels even though they are banned, etc.
 *
 * For more information about becoming an IRCOp and how to do admin
 * tasks, see: https://www.unrealircd.org/docs/IRCOp_guide
 *
 * For details regarding the oper { } block itself, see
 * https://www.unrealircd.org/docs/Oper_block
 */

/* Here is an example oper block for 'bobsmith' with password 'test'.
 * You MUST change this!!
 */
oper bobsmith {
	class opers;
	mask *@*;
	password "test";
	/* Oper permissions are defined in an 'operclass' block.
	 * See https://www.unrealircd.org/docs/Operclass_block
	 * UnrealIRCd ships with a number of default blocks, see
	 * the article for a full list. We choose 'netadmin' here.
	 */
	operclass netadmin;
	swhois "is a Network Administrator";
	vhost netadmin.example.org;
}

/* Listen blocks define the ports where the server should listen on.
 * In other words: the ports that clients and servers may use to
 * connect to this server.
 * 
 * Syntax:
 * listen {
 * { 
 *   ip <ip>;
 *   port <port>;
 *   options {
 *     <options....>;
 *   }
 * }
 */

/* Standard IRC port 6667 */
listen {
	ip *;
	port 6667;
}

/* Standard IRC SSL/TLS port 6697 */
listen {
	ip *;
	port 6697;
	options { tls; }
}

/* Special SSL/TLS servers-only port for linking */
listen {
	ip *;
	port 6900;
	options { tls; serversonly; }
}

/* NOTE: If you are on an IRCd shell with multiple IP's and you use
 *       the above listen { } blocks then you will likely get an
 *       'Address already in use' error and the ircd won't start.
 *       This means you MUST bind to a specific IP instead of '*' like:
 *       listen { ip 1.2.3.4; port 6667; }
 *       Of course, replace the IP with the IP that was assigned to you.
 */

/* Here you can add a password for the IRCOp-only /DIE and /RESTART commands.
 * This is mainly meant to provide a little protection against accidental
 * restarts and server kills.
 */
drpass {
	restart "restart";
	die "die";
}

/* The log block defines what should be logged and to what file.
 * See also https://www.unrealircd.org/docs/Log_block
 */

/* This is a good default, it logs everything */
log "ircd.log" {
	flags {
		oper;
		connects;
		server-connects;
		kills;
		errors;
		flood;
		sadmin-commands;
		chg-commands;
		oper-override;
		tkl;
		spamfilter;
	}
}

/* With "aliases" you can create an alias like /SOMETHING to send a message to
 * some user or bot. They are usually used for services.
 *
 * We have a number of pre-set alias files, check out the alias/ directory.
 * As an example, here we include all aliases used for anope services.
 */
include "aliases/anope.conf";

/* Network configuration */
set {
	network-name 		"ExampleNET";
	default-server 		"irc.example.org";
	services-server 	"services.example.org";
	stats-server 		"stats.example.org";
	help-channel 		"#Help";
	hiddenhost-prefix	"Clk";
	prefix-quit 		"Quit";

	/* Cloak keys should be the same at all servers on the network.
	 * They are used for generating masked hosts and should be kept secret.
	 * The keys should be 3 random strings of 50-100 characters
	 * and must consist of lowcase (a-z), upcase (A-Z) and digits (0-9).
	 * HINT: On *NIX, you can run './unrealircd gencloak' in your shell to let
	 *       UnrealIRCd generate 3 random strings for you.
	 */
	cloak-keys {
		"aoAr1HnR6gl3sJ7hVz4Zb7x4YwpW";
		"and another one";
		"and another one";
	}
}

